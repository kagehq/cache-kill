name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ''
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            ext: '.exe'
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure build env (fast but optimized)
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C debuginfo=0" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_LTO=false" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_CODEGEN_UNITS=16" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_OPT_LEVEL=2" >> $GITHUB_ENV

      - name: Install cross-compilation toolchain (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "Installing aarch64 cross-compilation toolchain..."
          timeout 10m sudo apt-get update
          timeout 10m sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "Cross-compilation toolchain installed successfully"

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.target }}

      - name: Build (cachekill only)
        timeout-minutes: 30
        run: |
          echo "Building for target: ${{ matrix.target }} (cachekill only)"
          cargo build --release --bin cachekill --target ${{ matrix.target }}
          echo "Build completed successfully"

      - name: Strip binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Try cross-compilation strip first, fallback to regular strip if not available
            if command -v aarch64-linux-gnu-strip >/dev/null 2>&1; then
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/cachekill || echo "Cross-compilation strip failed, skipping"
            else
              echo "Cross-compilation strip not available, skipping strip for aarch64"
            fi
          else
            strip target/${{ matrix.target }}/release/cachekill
          fi

      - name: Strip binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: echo "Skipping strip on Windows"

      - name: Upload cachekill binary
        uses: actions/upload-artifact@v4
        with:
          name: cachekill-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/cachekill${{ matrix.ext }}

      # Skip MCP in release for speed; can be re-enabled when needed

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Check build status
        run: |
          echo "Checking if build jobs completed successfully..."
          echo "This release step will only run if all build jobs passed"
          echo "If you see this message, the build jobs completed"

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          echo "Available artifacts:"
          ls -la
          
          # Create platform-specific archives
          for target in x86_64-unknown-linux-gnu x86_64-pc-windows-gnu x86_64-apple-darwin aarch64-unknown-linux-gnu aarch64-apple-darwin; do
            echo "Processing target: $target"
            if [ -f "cachekill-$target/cachekill" ] || [ -f "cachekill-$target/cachekill.exe" ]; then
              echo "Found cachekill binary for $target"
              mkdir -p "release-assets/$target"
              cp "cachekill-$target/cachekill"* "release-assets/$target/" 2>/dev/null || echo "No cachekill binary found for $target"
              cp "mcp-$target/mcp"* "release-assets/$target/" 2>/dev/null || echo "No mcp binary found for $target"
              
              # Create tar.gz for Unix systems
              if [[ "$target" == *"linux"* ]] || [[ "$target" == *"darwin"* ]]; then
                cd "release-assets/$target"
                if [ "$(ls -A .)" ]; then
                  tar -czf "../../cachekill-$target.tar.gz" *
                  echo "Created cachekill-$target.tar.gz"
                else
                  echo "No files to archive for $target"
                fi
                cd ../..
              fi
              
              # Create zip for Windows
              if [[ "$target" == *"windows"* ]]; then
                cd "release-assets/$target"
                if [ "$(ls -A .)" ]; then
                  zip -r "../../cachekill-$target.zip" *
                  echo "Created cachekill-$target.zip"
                else
                  echo "No files to archive for $target"
                fi
                cd ../..
              fi
            else
              echo "No cachekill binary found for $target"
            fi
          done
          
          echo "Final release assets:"
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$file" >> checksums.txt
            elif command -v shasum >/dev/null 2>&1; then
              shasum -a 256 "$file" >> checksums.txt
            fi
          done
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
            release-assets/checksums.txt
          generate_release_notes: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
