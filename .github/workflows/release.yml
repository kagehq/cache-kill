name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ''
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            ext: '.exe'
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: ''
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ''
          - target: aarch64-apple-darwin
            os: macos-latest
            ext: ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation toolchain (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Try cross-compilation strip first, fallback to regular strip if not available
            if command -v aarch64-linux-gnu-strip >/dev/null 2>&1; then
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/cachekill || echo "Cross-compilation strip failed, skipping"
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/mcp || echo "Cross-compilation strip failed, skipping"
            else
              echo "Cross-compilation strip not available, skipping strip for aarch64"
            fi
          else
            strip target/${{ matrix.target }}/release/cachekill
            strip target/${{ matrix.target }}/release/mcp
          fi

      - name: Strip binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/cachekill.exe
          strip target/${{ matrix.target }}/release/mcp.exe

      - name: Upload cachekill binary
        uses: actions/upload-artifact@v4
        with:
          name: cachekill-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/cachekill${{ matrix.ext }}

      - name: Upload mcp binary
        uses: actions/upload-artifact@v4
        with:
          name: mcp-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/mcp${{ matrix.ext }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Create platform-specific archives
          for target in x86_64-unknown-linux-gnu x86_64-pc-windows-gnu x86_64-apple-darwin aarch64-unknown-linux-gnu aarch64-apple-darwin; do
            if [ -f "cachekill-$target/cachekill" ] || [ -f "cachekill-$target/cachekill.exe" ]; then
              mkdir -p "release-assets/$target"
              cp "cachekill-$target/cachekill"* "release-assets/$target/"
              cp "mcp-$target/mcp"* "release-assets/$target/"
              
              # Create tar.gz for Unix systems
              if [[ "$target" == *"linux"* ]] || [[ "$target" == *"darwin"* ]]; then
                cd "release-assets/$target"
                tar -czf "../../cachekill-$target.tar.gz" *
                cd ../..
              fi
              
              # Create zip for Windows
              if [[ "$target" == *"windows"* ]]; then
                cd "release-assets/$target"
                zip -r "../../cachekill-$target.zip" *
                cd ../..
              fi
            fi
          done

      - name: Generate checksums
        run: |
          cd release-assets
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$file" >> checksums.txt
            elif command -v shasum >/dev/null 2>&1; then
              shasum -a 256 "$file" >> checksums.txt
            fi
          done
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
            release-assets/checksums.txt
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
